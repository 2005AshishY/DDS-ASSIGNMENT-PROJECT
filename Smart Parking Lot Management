

----------------------FEATURE OF PROJECT-----------------Smart Parking Lot Management – Features------------------Smart Parking Lot Management – Features------

 
Dynamic Memory Allocation (Linked List)

Each car is represented as a dynamically allocated node (Car struct).

No fixed-size array → memory is allocated only when a car parks.

Car Entry (Parking)

User enters plate number and owner name.

The system records the entry timestamp automatically.

Car gets added to the linked list of active parked cars.

If the lot is full, the system shows overflow message:
“Parking lot FULL! Cannot park car …”

Car Exit (Remove Car)

Search the linked list by plate number.

Remove the car node when found.

Show its entry time so the manager knows how long it was parked.

Frees up one slot.

-----------------------------------------------------------------------END-----------------END----------------------------------------END---------------------------------END---------------------------------------------













#include <bits/stdc++.h>
using namespace std;

struct Car {
    string plateNumber;
    string ownerName;
    string entryTime;
    Car* next;
};

// Utility: current timestamp
string currentTimestamp() {
    time_t now = time(nullptr);
    char buf[20];
    strftime(buf, sizeof(buf), "%Y-%m-%d %H:%M:%S", localtime(&now));
    return string(buf);
}

class ParkingLot {
    Car* head;           // linked list head
    int capacity;        // max slots
    int count;           // current cars
public:
    ParkingLot(int cap) {
        capacity = cap;
        count = 0;
        head = nullptr;
    }

    // Add a new car (entry)
    void parkCar(string plate, string owner) {
        if (count >= capacity) {
            cout << "Parking lot FULL! Cannot park car " << plate << "\n";
            return;
        }
        Car* newCar = new Car{plate, owner, currentTimestamp(), nullptr};
        newCar->next = head;
        head = newCar;
        count++;
        cout << "Car " << plate << " parked successfully. Slots used: " 
             << count << "/" << capacity << "\n";
    }

    // Remove a car (exit)
    void removeCar(string plate) {
        if (!head) {
            cout << "Parking lot empty.\n";
            return;
        }
        Car* curr = head;
        Car* prev = nullptr;
        while (curr && curr->plateNumber != plate) {
            prev = curr;
            curr = curr->next;
        }
        if (!curr) {
            cout << "Car with plate " << plate << " not found.\n";
            return;
        }
        if (prev) prev->next = curr->next;
        else head = curr->next;

        cout << "Car " << plate << " exited. Parked at: " << curr->entryTime << "\n";
        delete curr;
        count--;
    }

    // Display all parked cars
    void showParkedCars() {
        if (!head) {
            cout << "No cars parked currently.\n";
            return;
        }
        cout << "\n--- Active Parked Cars ---\n";
        Car* temp = head;
        while (temp) {
            cout << "Plate: " << temp->plateNumber 
                 << " | Owner: " << temp->ownerName 
                 << " | Entry: " << temp->entryTime << "\n";
            temp = temp->next;
        }
    }

    // Get current available slots
    void availableSlots() {
        cout << "Available slots: " << (capacity - count) 
             << " / " << capacity << "\n";
    }

    ~ParkingLot() {
        while (head) {
            Car* tmp = head;
            head = head->next;
            delete tmp;
        }
    }
};

// ---------- Menu ----------
int main() {
    int cap;
    cout << "Enter parking lot capacity: ";
    cin >> cap;
    cin.ignore();

    ParkingLot lot(cap);

    while (true) {
        cout << "\n=== Smart Parking Lot Management ===\n"
             << "1) Park Car (Entry)\n"
             << "2) Remove Car (Exit)\n"
             << "3) Show Parked Cars\n"
             << "4) Show Available Slots\n"
             << "0) Exit\n"
             << "Select: ";
        int choice;
        if (!(cin >> choice)) break;
        cin.ignore();

        if (choice == 0) {
            cout << "Exiting system...\n";
            break;
        }

        switch (choice) {
            case 1: {
                string plate, owner;
                cout << "Enter plate number: ";
                getline(cin, plate);
                cout << "Enter owner name: ";
                getline(cin, owner);
                lot.parkCar(plate, owner);
                break;
            }
            case 2: {
                string plate;
                cout << "Enter plate number to remove: ";
                getline(cin, plate);
                lot.removeCar(plate);
                break;
            }
            case 3:
                lot.showParkedCars();
                break;
            case 4:
                lot.availableSlots();
                break;
            default:
                cout << "Invalid choice.\n";
        }
    }
    return 0;
}


------------------------           OUTPUT                  ----------------------------------  OUTPUT         -------------OUTPUT --------------------------------OUTPUT--------------------------------------------



Enter parking lot capacity: 2

=== Smart Parking Lot Management ===
1) Park Car (Entry)
2) Remove Car (Exit)
3) Show Parked Cars
4) Show Available Slots
0) Exit
Select: 1
Enter plate number: UP32AB1234
Enter owner name: Ashish
Car UP32AB1234 parked successfully. Slots used: 1/2

Select: 1
Enter plate number: UP32XY9999
Enter owner name: Raj
Car UP32XY9999 parked successfully. Slots used: 2/2

Select: 1
Enter plate number: UP32CC1111
Enter owner name: Kumar
Parking lot FULL! Cannot park car UP32CC1111

Select: 3
--- Active Parked Cars ---
Plate: UP32XY9999 | Owner: Raj | Entry: 2025-08-23 21:45:50
Plate: UP32AB1234 | Owner: Ashish | Entry: 2025-08-23 21:45:35



